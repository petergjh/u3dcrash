// Generated by github.com/davyxu/tabtoy
// DO NOT EDIT!!
// Version: 3.0.1
using System;
using System.Collections.Generic;

namespace DataGod
{ 		
	public partial class AssetPathConfig : tabtoy.ITableSerializable
	{ 
		public string AssetName = string.Empty; 
		public string AssetPath = string.Empty; 

		#region Deserialize Code
		public void Deserialize( tabtoy.TableReader reader )
		{
			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
 				switch (mamaSaidTagNameShouldBeLong)
                { 
                	case 0x80000:
                	{
						reader.ReadString( ref AssetName );
                	}
                	break;
                	case 0x80001:
                	{
						reader.ReadString( ref AssetPath );
                	}
                	break;
                    default:
                    {
                        reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
                    }
                    break;
				}
			}
		}
		#endregion 
	}
	
	public partial class BloodlinesConfig : tabtoy.ITableSerializable
	{ 
		public Int32 Bloodline_ID = 0; 
		public Int32 Race_ID = 0; 
		public List<Int32> STR_Value = new List<Int32>(); 
		public List<Int32> MAG_Value = new List<Int32>(); 
		public List<Int32> CON_Value = new List<Int32>(); 
		public List<Int32> INT_Value = new List<Int32>(); 
		public List<Int32> AGL_Value = new List<Int32>(); 
		public List<Int32> AGE_Value = new List<Int32>(); 
		public List<Int32> SAN_Value = new List<Int32>(); 
		public float Probability = 0; 

		#region Deserialize Code
		public void Deserialize( tabtoy.TableReader reader )
		{
			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
 				switch (mamaSaidTagNameShouldBeLong)
                { 
                	case 0x20000:
                	{
						reader.ReadInt32( ref Bloodline_ID );
                	}
                	break;
                	case 0x20001:
                	{
						reader.ReadInt32( ref Race_ID );
                	}
                	break;
                	case 0x660002:
                	{
						reader.ReadInt32( ref STR_Value );
                	}
                	break;
                	case 0x660003:
                	{
						reader.ReadInt32( ref MAG_Value );
                	}
                	break;
                	case 0x660004:
                	{
						reader.ReadInt32( ref CON_Value );
                	}
                	break;
                	case 0x660005:
                	{
						reader.ReadInt32( ref INT_Value );
                	}
                	break;
                	case 0x660006:
                	{
						reader.ReadInt32( ref AGL_Value );
                	}
                	break;
                	case 0x660007:
                	{
						reader.ReadInt32( ref AGE_Value );
                	}
                	break;
                	case 0x660008:
                	{
						reader.ReadInt32( ref SAN_Value );
                	}
                	break;
                	case 0x70009:
                	{
						reader.ReadFloat( ref Probability );
                	}
                	break;
                    default:
                    {
                        reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
                    }
                    break;
				}
			}
		}
		#endregion 
	}
	
	public partial class RaceConfig : tabtoy.ITableSerializable
	{ 
		public Int32 Race_ID = 0; 
		public List<Int32> HP = new List<Int32>(); 
		public List<Int32> MP = new List<Int32>(); 
		public List<float> MoveSpeed = new List<float>(); 
		public List<float> AttackRate = new List<float>(); 
		public List<Int32> AttackValue = new List<Int32>(); 
		public List<Int32> DefenseValue = new List<Int32>(); 
		public float Probability = 0; 

		#region Deserialize Code
		public void Deserialize( tabtoy.TableReader reader )
		{
			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
 				switch (mamaSaidTagNameShouldBeLong)
                { 
                	case 0x20000:
                	{
						reader.ReadInt32( ref Race_ID );
                	}
                	break;
                	case 0x660001:
                	{
						reader.ReadInt32( ref HP );
                	}
                	break;
                	case 0x660002:
                	{
						reader.ReadInt32( ref MP );
                	}
                	break;
                	case 0x6b0003:
                	{
						reader.ReadFloat( ref MoveSpeed );
                	}
                	break;
                	case 0x6b0004:
                	{
						reader.ReadFloat( ref AttackRate );
                	}
                	break;
                	case 0x660005:
                	{
						reader.ReadInt32( ref AttackValue );
                	}
                	break;
                	case 0x660006:
                	{
						reader.ReadInt32( ref DefenseValue );
                	}
                	break;
                	case 0x70007:
                	{
						reader.ReadFloat( ref Probability );
                	}
                	break;
                    default:
                    {
                        reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
                    }
                    break;
				}
			}
		}
		#endregion 
	}
	
	public partial class EquipmentsConfig : tabtoy.ITableSerializable
	{ 
		public string EquipmentID = string.Empty; 
		public string EquipmentType = string.Empty; 
		public string EquipmentSubType = string.Empty; 
		public string EquipmentNameKey = string.Empty; 
		public string EquipmentName = string.Empty; 
		public string AttackRange = string.Empty; 
		public string AdditionEffectsCount = string.Empty; 
		public string IconPath = string.Empty; 
		public string Price = string.Empty; 
		public string BodyPart = string.Empty; 
		public string PhysicAttack = string.Empty; 
		public string MagicAttack = string.Empty; 
		public string PhysicDefense = string.Empty; 
		public string MagicDefense = string.Empty; 
		public string ProduceLimitLevel = string.Empty; 
		public string ProduceTime = string.Empty; 
		public string CostGold = string.Empty; 
		public string CostMaterialID = string.Empty; 

		#region Deserialize Code
		public void Deserialize( tabtoy.TableReader reader )
		{
			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
 				switch (mamaSaidTagNameShouldBeLong)
                { 
                	case 0x80000:
                	{
						reader.ReadString( ref EquipmentID );
                	}
                	break;
                	case 0x80001:
                	{
						reader.ReadString( ref EquipmentType );
                	}
                	break;
                	case 0x80002:
                	{
						reader.ReadString( ref EquipmentSubType );
                	}
                	break;
                	case 0x80003:
                	{
						reader.ReadString( ref EquipmentNameKey );
                	}
                	break;
                	case 0x80004:
                	{
						reader.ReadString( ref EquipmentName );
                	}
                	break;
                	case 0x80005:
                	{
						reader.ReadString( ref AttackRange );
                	}
                	break;
                	case 0x80006:
                	{
						reader.ReadString( ref AdditionEffectsCount );
                	}
                	break;
                	case 0x80007:
                	{
						reader.ReadString( ref IconPath );
                	}
                	break;
                	case 0x80008:
                	{
						reader.ReadString( ref Price );
                	}
                	break;
                	case 0x80009:
                	{
						reader.ReadString( ref BodyPart );
                	}
                	break;
                	case 0x8000a:
                	{
						reader.ReadString( ref PhysicAttack );
                	}
                	break;
                	case 0x8000b:
                	{
						reader.ReadString( ref MagicAttack );
                	}
                	break;
                	case 0x8000c:
                	{
						reader.ReadString( ref PhysicDefense );
                	}
                	break;
                	case 0x8000d:
                	{
						reader.ReadString( ref MagicDefense );
                	}
                	break;
                	case 0x8000e:
                	{
						reader.ReadString( ref ProduceLimitLevel );
                	}
                	break;
                	case 0x8000f:
                	{
						reader.ReadString( ref ProduceTime );
                	}
                	break;
                	case 0x80010:
                	{
						reader.ReadString( ref CostGold );
                	}
                	break;
                	case 0x80011:
                	{
						reader.ReadString( ref CostMaterialID );
                	}
                	break;
                    default:
                    {
                        reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
                    }
                    break;
				}
			}
		}
		#endregion 
	}
	

	// Combine struct
	public partial class Table
	{ 
		// table: AssetPathConfig
		public List<AssetPathConfig> AssetPathConfig = new List<AssetPathConfig>(); 
		// table: BloodlinesConfig
		public List<BloodlinesConfig> BloodlinesConfig = new List<BloodlinesConfig>(); 
		// table: EquipmentsConfig
		public List<EquipmentsConfig> EquipmentsConfig = new List<EquipmentsConfig>(); 
		// table: RaceConfig
		public List<RaceConfig> RaceConfig = new List<RaceConfig>(); 

		// Indices 

		

		public void ResetData( )
		{   
			AssetPathConfig.Clear(); 
			BloodlinesConfig.Clear(); 
			EquipmentsConfig.Clear(); 
			RaceConfig.Clear();  	
		}
		
		public void Deserialize( tabtoy.TableReader reader )
		{	
			reader.ReadHeader();

			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
				if (mamaSaidTagNameShouldBeLong == 0x6f0000)
				{
                    var tabName = string.Empty;
                    reader.ReadString(ref tabName);
					switch (tabName)
					{ 
						case "AssetPathConfig":
						{
							reader.ReadStruct(ref AssetPathConfig);	
						}
						break;
						case "BloodlinesConfig":
						{
							reader.ReadStruct(ref BloodlinesConfig);	
						}
						break;
						case "EquipmentsConfig":
						{
							reader.ReadStruct(ref EquipmentsConfig);	
						}
						break;
						case "RaceConfig":
						{
							reader.ReadStruct(ref RaceConfig);	
						}
						break;
						default:
						{
							reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
						}
						break;
					}
				}
			}
			
		}
	}
}
